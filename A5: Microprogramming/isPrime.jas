//CPSC359 Assignment 5
//created by Alejandro Garcia and Muzhou,Zhai
.constant
OBJREF 0x40
.end-constant

.main
	
        LDC_W	OBJREF
        BIPUSH 29
        //will print 1 since it is prime
        INVOKEVIRTUAL iprime
        OUT
        //wiill print the ascii of 10^2 (d)
        LDC_W   OBJREF
        BIPUSH 10
        BIPUSh 2
        INVOKEVIRTUAL ipower
        OUT
        BIPUSH 1
        IPRIME
        
.end-main

//n is integer
//returns 1 if prime, 0 otherwise
.method iprime (n)
.var
 r
 i
 tmp
.end-var
iprime:
        BIPUSH 48  
        ISTORE r     //initialize the r with the false value 48
        //n <= 1
        ILOAD n
        BIPUSH 2	//if n-2<0(that means n<=1)
        ISUB
        IFLT return //return the false value

        //n <= 3   
        ILOAD n
        BIPUSH 4   //if n-4<0(that means n<=3)
        ISUB
        IFLT iprimeTrue   //return the true value
     
        
        //DUP
        //n mod 2 == 0 or n mod 3 == 0
        LDC_W   OBJREF	//for calling function
        ILOAD n
        //HALT 
        BIPUSH 2
        BIPUSH 1     //to get the remainder of the diversion
        INVOKEVIRTUAL idiv     //call the idiv(a,b,c) function
        IFEQ return		//if the remainder is 0 (n mod 2 = 0), then return the false value


        LDC_W   OBJREF  //for calling function
        ILOAD n
        //HALT 
        BIPUSH 3
        BIPUSH 1    //to get the remainder of the diversion
        INVOKEVIRTUAL idiv  //call the idiv(a,b,c) function
        IFEQ return	//if the remainder is 0 (n mod 2 = 0), then return the false value

        //i = 5
        BIPUSH 5
        ISTORE i
//while check
iprime2:
        //ixi <= n?  
        LDC_W   OBJREF     //for calling function
        ILOAD i
        ILOAD i
        INVOKEVIRTUAL imul		//call function mul(a,b)
        ILOAD n
        BIPUSH 1
        IADD   					//n+1
        ISUB						//if i*i<=n
        IFLT iprime3          //jump to iprime3
        GOTO iprimeTrue		//otherwise return true

//while body
iprime3:
        // n mod (i+2) == 0?
        //HALT
        //DUP
        ILOAD i
        BIPUSH 2
        ISTORE tmp //let tmp = 2
        LDC_W   OBJREF //for calling function
        ILOAD n
        ILOAD tmp
        BIPUSH 1
        INVOKEVIRTUAL idiv  //to get the remainder of the diversion
        IFEQ return	//if remainder = 0, return false
        //HALT
        //n mod i == 0?
        LDC_W   OBJREF	//for calling function
        ILOAD n
        ILOAD i
        BIPUSH 1
        INVOKEVIRTUAL idiv		//to get the remainder of the diversion
        IFEQ return			//if remainder = 0, return false
        
        IINC i 6          //i+=6
        GOTO iprime2			//go back to the loop

iprimeTrue:
        BIPUSH 49				//if return true, let r=49 (1)
        ISTORE r
return:
        ILOAD r
        IRETURN

.end-method						//end of the function


//raises a to b
.method ipower (a, b) 		//the function for the calculation of power, a is the base,and b is the power
.var
 p
 i
.end-var
ipower:
        BIPUSH 0x1
        ISTORE p				//p=1, p is the result of the power calculation
        BIPUSH 0x0
        ISTORE i 				//i=0, i is the loop counter
//for loop check
ipower1:
        ILOAD i
        ILOAD b
        ISUB					//if i<b, jump to ipower2
        IFLT ipower2
        //POP
        GOTO return			//otherwise return the value

//for body
ipower2:
        LDC_W OBJREF			//for calling the function
        ILOAD p
        ILOAD a
        INVOKEVIRTUAL imul		//call the function mul(p,a)
        ISTORE p					//p*=a			
        IINC i 0x1				//i++
        GOTO ipower1				//goto the to of the loop

return:
        ILOAD p		//return the value
        IRETURN
.end-method				//end the method

//---------The function that calculate the division (a/b), c is the mode for the function 
.method idiv (a, b, c)// c=1 for the remainder, c=0 for the quotient
.var
 q
 r
 n
.end-var
absA:
        ILOAD a	//absolute value of a
        //NEG
        ISTORE a
        IINC n 0x1  
idiv:
        ILOAD a
        IFLT absA	//if a< absolute value, goto idvi2
        GOTO idiv2

absB:
        ILOAD b		//absolute value of b
        ISTORE b
        IINC n 0x1
idiv2:
        ILOAD b
        IFLT absB		//if a< absolute value, goto absB 

//a and b are now abs of a and b respectively
        BIPUSH 0
        ISTORE q	//q=0
        ILOAD a
        ISTORE r		//r=a
//While check
idiv3:
        ILOAd b
        ILOAD r
        BIPUSH 1  //r+1
        IADD
        ISUB
        IFLT idiv4
        GOTO idiv5

//while body, r = r - b
idiv4:
        ILOAD r
        ILOAD b
        ISUB
        ISTORE r
        IINC q 1
        GOTO idiv3
// n stores 1 if only 1 of the two numbers was negative
// if n is negative, we will make result negative
idiv5:
        BIPUSH 0x1
        ILOAD n
        ISUB
        IFEQ idiv6
        GOTO idiv7
//negate 
idiv6:
        ILOAD q
        //INEG
        ISTORE q
//return remainder if c was 1
idiv7:  
        ILOAD c
        IFEQ idiv8
        ILOAD r
        GOTO return
//else return quotient
idiv8:
        ILOAD q
return:
        IRETURN
.end-method

.method imul(a, b)

.var
 m
 c
 o
 i
 n
.end-var
imul:
        //m = 0
        BIPUSH 0x0
        ISTORE m
        GOTO imul1
absA:
        ILOAD a
        INEG
        ISTORE a        
        IINC n 0x1
//check for negate, branch upwards if so 
imul1: 
        ILOAD a       
        IFLT absA
        GOTO imul2
        
absB:
        ILOAD b
        INEG
        ISTORE b
        IINC n 0x1
//same as above
imul2:     
        ILOAD b
        IFLT absB

        ILOAD a
        ILOAD b
        //absA - absB
        ISUB

        IFLT bBiggerThanA
        //POP
        GOTO aBiggerThanB
// c will be set to be the smaller number
// o will be set to be the larger number
aBiggerThanB:
        ILOAD b
        ISTORE c
        ILOAD a
        ISTORE o
        GOTO imul3

bBiggerThanA:
        ILOAD a
        ISTORE c
        ILOAD b
        ISTORE o
        GOTO imul3
//instantiate loop variable
imul3:
        BIPUSH 0x0
        ISTORE i
//for loop check
imul4:
        ILOAD i
        ILOAD c
        ISUB
        IFLT imul5
        //POP
        GOTO imul6

//for body
//m = m + o
imul5:
        ILOAD m
        ILOAD o
        IADD
        ISTORE m
        IINC i 0x1
        GOTO imul4

//Same as div, we use the previously computed n to check how many
//negatives we had and set the result's sign based on it
imul6:
        BIPUSH 0x1
        ILOAD n
        IF_ICMPEQ imul7
        GOTO return

imul7:
        ILOAD m
        INEG
        ISTORE m
        

return: 
        ILOAD m
        IRETURN
.end-method

